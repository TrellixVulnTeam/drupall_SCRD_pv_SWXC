{#
/**
 * @file
 * Sobreescritura de cada noticia en el bloque "Actualidad".
 * para modificar el layout del BLOQUE dirijase a:
 * "../block/block--views-block--updates.html.twig
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{{ attach_library('classy/node') }}

<article{{ node.field_is_featured.value == "1" ? 
            attributes.addClass(classes).setAttribute('id', 'updatesSection') :
            attributes.addClass(classes) }}>
  {{ title_suffix }}

  <div{{ content_attributes.addClass('node__content node-updates') }}>
    {% if node.field_is_featured.value == "1" %} {# Si es una noticia destacada #}
      <div class="row">
        <div class="col-12 col-xl-7">
          <div class="node-updates__image--big h-100">
            {{ content.field_image }}
            <span class="node-updates__tag--big {{ node.field_news_type.value }} ">
              {{ content.field_news_type[0]["#markup"] }}
            </span>
          </div>
        </div>

        <div class="col-12 col-xl-5">
          <span class="d-flex mt-3 f-14 calendar-icon text-dark-800">
            {{ node.field_news_date.value|date("U")|format_date('fecha_completa') }}
          </span>

          {{ title_prefix }}
          {% if label and not page %}
            <h2{{ title_attributes }} >
              <a href="{{ url }}" rel="bookmark" class="content-title underline">{{ label }}</a>
            </h2>
          {% endif %}
          {{ title_suffix }}

          <div class="node-updates__teaser mt-3 mt-lg-5">
            {{ content.body }}
          </div>

          <div class="d-flex justify-content-start justify-content-lg-end mt-2 mt-lg-5 mb-6 mb-lg-0">
            <a href={{ url }} class="tertiary-button"> <span class="arrow-right"> Leer articulo </span></a>
          </div>
        </div>
      </div>

    {% else %}
      <div class="d-flex mt-2 mt-lg-6 mr-0 mr-lg-4 pr-md-1 border-right">
        <div class="node-updates__image--small  align-self-start">
          {{ content.field_image }}
          <span class="node-updates__tag--small {{ node.field_news_type.value }}">
            {{ content.field_news_type[0]["#markup"] }}
          </span>
        </div>

        <div class="pl-3 d-flex flex-column" style="height: 170px">
          <span class="d-flex mb-1 f-14 calendar-icon text-dark-800">
            {{ node.field_news_date.value|date("U")|format_date('fecha_completa') }}
          </span>
          <a href="{{ url }}" rel="bookmark" class="f-18 text-primary-700 font-weight-semibold underline node-updates__new">{{ label }}</a>
        </div>
      </div>

    {% endif %}
  </div>
</article>
