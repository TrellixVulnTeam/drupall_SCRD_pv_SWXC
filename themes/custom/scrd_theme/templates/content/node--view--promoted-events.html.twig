{#
/**
 * @file
 * Sobreescritura de cada evento en el bloque de eventos destacados en la p√°gina de busqueda de eventos
 * para modificar el layout del BLOQUE dirijase a:
 * "../block/block--views-block--promoted-events.html
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>
  {{ title_suffix }}

	<div{{ content_attributes.addClass('node__content component-event--big bg-white') }}>
		<div class="row no-gutters">
			<div class="col">
				<div class="component-event--big__image position-relative">
					{{ content.field_image }}
					<span class="component-event--big__tag">
						{{ content.field_event_type[0]["#markup"] }}
					</span>
				</div>
			</div>
		</div>

		<div class="row no-gutters">
			<div class="col-12 col-md-8">
				<div class="p-4 d-flex flex-column justify-content-between h-100">
					<p class="component-event--big__title">
						<a href="{{ url }}" class="font-weight-semibold f-20 text-primary-700 lh-24" rel="bookmark">{{ node.title.value }}</a>
					</p>
					<span class="d-flex location-icon f-14 text-dark-800">
						{{ content.field_locations.0 }}
					</span>
				</div>
			</div>
			<div class="col component-event--big__date">
				<div class="bg-dark-200">
					<p class="bg-dark-300 text-primary-800 f-14 text-md-center mb-0 pl-2 pl-md-0">Inicia</p>
					<div class="py-1 px-2 d-flex flex-md-column align-items-center" style="justify-content: space-evenly">
						<span class="f-20 calendar-icon--big font-weight-bold text-primary-800">
							{{ node.field_begin_date.value|date("U")|format_date('short_complete_date') }}
						</span>
						<span class="f-14">
							{{ node.field_begin_date.value|date("U")|format_date('hora_simple') }}
						</span>
					</div>
				</div>
				<div class="bg-dark-200">
					<p class="bg-dark-300 text-primary-800 f-14 text-md-center mb-0 pl-2 pl-md-0">Finaliza</p>
					<div class="py-1 px-2 d-flex flex-md-column align-items-center" style="justify-content: space-evenly">
						<span class="f-20 calendar-icon--big font-weight-bold text-primary-800">
							{{ node.field_ending_date.value|date("U")|format_date('short_complete_date') }}
						</span>
						<span class="f-14">
							{{ node.field_ending_date.value|date("U")|format_date('hora_simple') }}
						</span>
					</div>
				</div>
			</div>
		</div>
  </div>

</article>
